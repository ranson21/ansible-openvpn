- name: Set EasyRSA directory variable
  ansible.builtin.set_fact:
    easyrsa_dir: /etc/openvpn/easy-rsa
    openvpn_dir: /etc/openvpn

- name: Create OpenVPN PKI infrastructure
  block:
    - name: Copy easy-rsa files to OpenVPN directory
      ansible.builtin.command:
        cmd: make-cadir "{{ easyrsa_dir }}"
      args:
        creates: "{{ easyrsa_dir }}/easyrsa"

    - name: Initialize PKI
      ansible.builtin.command:
        cmd: "./easyrsa init-pki"
        chdir: "{{ easyrsa_dir }}"
      args:
        creates: "{{ easyrsa_dir }}/pki"

    - name: Build CA
      ansible.builtin.expect:
        command: "./easyrsa build-ca nopass"
        chdir: "{{ easyrsa_dir }}"
        responses:
          (.*)Common Name(.*): "ca"
      args:
        creates: "{{ easyrsa_dir }}/pki/ca.crt"

    - name: Build Server Key/Certificate
      ansible.builtin.expect:
        command: "./easyrsa build-server-full server nopass"
        chdir: "{{ easyrsa_dir }}"
        responses:
          (.*)Confirm request details(.*): "yes\n"
      args:
        creates: "{{ easyrsa_dir }}/pki/issued/server.crt"

    - name: Generate Diffie-Hellman key
      ansible.builtin.command:
        cmd: "./easyrsa gen-dh"
        chdir: "{{ easyrsa_dir }}"
      args:
        creates: "{{ easyrsa_dir }}/pki/dh.pem"

    - name: Generate TLS auth key
      ansible.builtin.command:
        cmd: openvpn --genkey --secret ta.key
        chdir: "{{ openvpn_dir }}"
      args:
        creates: "{{ openvpn_dir }}/ta.key"

    - name: Copy OpenVPN server configuration and certificates
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('0644') }}"
        remote_src: true
        owner: www-data
        group: www-data
      loop:
        - {
            src: "{{ easyrsa_dir }}/pki/ca.crt",
            dest: "{{ openvpn_dir }}/ca.crt",
          }
        - {
            src: "{{ easyrsa_dir }}/pki/issued/server.crt",
            dest: "{{ openvpn_dir }}/server.crt",
          }
        - {
            src: "{{ easyrsa_dir }}/pki/private/server.key",
            dest: "{{ openvpn_dir }}/server.key",
            mode: "0600",
          }
        - {
            src: "{{ easyrsa_dir }}/pki/dh.pem",
            dest: "{{ openvpn_dir }}/dh.pem",
          }

    - name: Configure OpenVPN server
      ansible.builtin.template:
        src: server.conf.j2
        dest: "{{ openvpn_dir }}/server.conf"
        mode: "0644"
        owner: www-data
        group: www-data

- name: Ensure iptables-persistent is installed
  ansible.builtin.apt:
    name: iptables-persistent
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Configure iptables NAT rules
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    source: 10.8.0.0/24
    out_interface: ens4
    jump: MASQUERADE
    state: present
  register: iptables_nat

- name: Configure iptables FORWARD rules for VPN traffic
  ansible.builtin.iptables:
    chain: FORWARD
    in_interface: "{{ item.in }}"
    out_interface: "{{ item.out }}"
    jump: ACCEPT
    state: present
    match: "{{ item.match | default(omit) }}"
    ctstate: "{{ item.ctstate | default(omit) }}"
  loop:
    - { in: "tun0", out: "ens4" }
    - {
        in: "ens4",
        out: "tun0",
        match: "state",
        ctstate: "RELATED,ESTABLISHED",
      }
  register: iptables_forward

- name: Save iptables rules if changes were made
  ansible.builtin.shell: |
    iptables-save > /etc/iptables/rules.v4
    ip6tables-save > /etc/iptables/rules.v6
  when: iptables_nat.changed or iptables_forward.changed

- name: Ensure netfilter-persistent service is enabled and started
  ansible.builtin.service:
    name: netfilter-persistent
    state: started
    enabled: yes
  when: ansible_facts['os_family'] == "Debian"
