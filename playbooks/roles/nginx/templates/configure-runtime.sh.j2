#!/bin/bash
set -euo pipefail

# Read runtime configuration from instance metadata
EXTERNAL_IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip")
CLIENT_ID=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/client_id")
ALLOWED_DOMAIN=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/allowed_domain")
DOMAIN_NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/domain_name")
SERVER_ADMIN=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/server_admin")

# Get certificate (using --standalone because nginx isn't running yet)
certbot certonly --standalone \
  --non-interactive \
  --agree-tos \
  --email ${SERVER_ADMIN} \
  --domains ${DOMAIN_NAME}

# Create environment file
cat > /opt/gcp-ovpn-portal/.env <<EOF
CLIENT_ID="${CLIENT_ID}"
ALLOWED_DOMAIN="${ALLOWED_DOMAIN}"
EXTERNAL_IP="${EXTERNAL_IP}"
EOF

# Update nginx configuration using the Let's Encrypt certificates
cat > /etc/nginx/sites-available/vpn-portal << EOF
server {
    listen 443 ssl;
    server_name ${DOMAIN_NAME};

    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}

server {
    listen 80;
    server_name ${DOMAIN_NAME};
    return 301 https://\$host\$request_uri;
}
EOF

ln -sf /etc/nginx/sites-available/vpn-portal /etc/nginx/sites-enabled/

# Temp disable nginx to run the test
sudo systemctl stop nginx

# Set up auto-renewal
certbot renew --dry-run

# Restart nginx to apply changes
systemctl restart nginx
systemctl restart vpn-web